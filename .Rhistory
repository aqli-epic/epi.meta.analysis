percent_people_above_who <- round((num_people_above_who/world_pop)*100, 1)
# aqli color population in ordered pm2.5 buckets
aqli_color_grp_pm2.5_buckets <- aqli_color %>%
mutate(region = ifelse(pm2020 >= 0 & pm2020 <= 25, "0-25", pm2020),
region = ifelse(pm2020 > 25 & pm2020 <= 50, ">25-50", region),
region = ifelse(pm2020 > 50 & pm2020 <= 75, ">50-75", region),
region = ifelse(pm2020 > 75 & pm2020 <= 100, ">75-100", region),
region = ifelse(pm2020 > 100, ">100", region)) %>%
group_by(region) %>%
summarise(tot_pop = sum(population, na.rm = TRUE)) %>%
ungroup() %>%
mutate(order_pollution_group = ifelse(region == "0-25", 1, 0),
order_pollution_group = ifelse(region == ">25-50", 2, order_pollution_group),
order_pollution_group = ifelse(region == ">50-75", 3, order_pollution_group),
order_pollution_group = ifelse(region == ">75-100", 4, order_pollution_group),
order_pollution_group = ifelse(region == ">100", 5, order_pollution_group)) %>%
ungroup() %>%
mutate(tot_pop_prop = (tot_pop/sum(tot_pop))*100)
# epi total number of studies in ordered pollution buckets
epi_num_studies_grp_pm2.5_buckets <- epi %>%
filter(!is.na(mean_pm2.5) & mean_pm2.5 != "NA") %>%
mutate(region = ifelse(mean_pm2.5 >= 0 & mean_pm2.5 <= 25, "0-25", mean_pm2.5),
region = ifelse(mean_pm2.5 > 25 & mean_pm2.5 <= 50, ">25-50", region),
region = ifelse(mean_pm2.5 > 50 & mean_pm2.5 <= 75, ">50-75", region),
region = ifelse(mean_pm2.5 > 75 & mean_pm2.5 <= 100, ">75-100", region),
region = ifelse(mean_pm2.5 > 100, ">100", region)) %>%
mutate(order_pollution_group = ifelse(region == "0-25", 1, 0),
order_pollution_group = ifelse(region == ">25-50", 2, order_pollution_group),
order_pollution_group = ifelse(region == ">50-75", 3, order_pollution_group),
order_pollution_group = ifelse(region == ">75-100", 4, order_pollution_group),
order_pollution_group = ifelse(region == ">100", 5, order_pollution_group)) %>%
group_by(region) %>%
summarise(tot_studies = n(), order_pollution_group = order_pollution_group[1]) %>%
ungroup() %>%
mutate(tot_studies_prop = (tot_studies/sum(tot_studies))*100)
#> line plot version (commented for now, can uncomment later if required)
# ggplot(mapping = aes(x= fct_reorder(region, order_pollution_group), group = 1)) +
# geom_smooth(data = aqli_color_grp_pm2.5_buckets, mapping = aes(y = tot_pop_prop, color = "Percent of World Population")) +
# geom_smooth(data = epi_num_studies_grp_pm2.5_buckets, mapping = aes(y = tot_studies_prop, color = "Percent of Total Studies")) +
#   labs(x = "pm2.5 buckets", y = "Percent of World Population") +
#   scale_y_continuous(sec.axis = sec_axis(~.*1, name = "Percent of Total Studies")) +
#   scale_color_manual(name = "", breaks = c("Percent of World Population", "Percent of Total Studies"), values = c("Percent of World Population" = "blue", "Percent of Total Studies" = "red")) +
# ggthemes::theme_hc()
#> bar chart version
# creating a master dataset for both population and studies data
pop_epi_studies_data <- aqli_color_grp_pm2.5_buckets %>%
left_join(epi_num_studies_grp_pm2.5_buckets, by = c("region", "order_pollution_group")) %>%
select(region,  order_pollution_group, tot_pop_prop, tot_studies_prop) %>%
pivot_longer(cols = tot_pop_prop:tot_studies_prop, names_to = "type_of_prop", values_to = "val")
# plotting the bar graph
pop_num_studies_in_pollution_buckets_graph <- pop_epi_studies_data %>%
ggplot() +
geom_col(mapping = aes(x = fct_reorder(region, order_pollution_group), y = val, fill = type_of_prop), position = position_dodge(), width = 0.7) +
scale_y_continuous(breaks = seq(0, 100, 10)) +
scale_fill_manual(values = c("tot_pop_prop" = "grey", "tot_studies_prop" = "cornflowerblue"), labels = c("Proportion of World Population in Bucket", "Proportion of Studies Completed in Bucket")) +
labs(x = "Mean PM2.5 bucket (in µg/m³)",  y = "Percentage", fill = "") +
theme_hc() +
theme(axis.line.y = element_line(color = "black"),
axis.line.x = element_line(color = "black"))
#> mean pm2.5 distribution segregated by country (density plot)
mean_pm2.5_country_wise_graph <- epi %>%
filter(!is.na(mean_pm2.5) | mean_pm2.5 != "NA") %>%
ggplot() +
geom_density(mapping = aes(x = mean_pm2.5, fill = country), alpha = 0.5, color = "black", position = "identity") +
scale_x_continuous(breaks = seq(1, 100, 2)) +
labs(x = expression(paste("Mean PM2.5 concentration (", mu, "g", "/", m^3, ")"))) +
theme_tufte()
#> mean pm2.5 distribution segregated by country (histogram)
# epi %>%
#   filter(!is.na(mean_pm2.5) | mean_pm2.5 != "NA") %>%
#   ggplot() +
#   geom_histogram(mapping = aes(x = mean_pm2.5, fill = country), alpha = 0.5, color = "white", position = "identity") +
#   scale_x_continuous(breaks = seq(1, 100, 2)) +
#   labs(x = expression(paste("Mean PM2.5 concentration (", mu, "g", "/", m^3, ")"))) +
#   theme_tufte()
#> other calculations for this block of code
#> total pop where pollution is > 50 micrograms per cubic meter
# thresholds
pm2.5_thresh_highly_polluted <- 50
pm2.5_thresh_severly_polluted <- 75
pm2.5_thresh_low_polluted <- 25
# higher than hp
# total pop where pollution is > x micrograms per cubic meter (hp)
total_pop_above_x_hp_micr_gm <- aqli_color %>%
filter(pm2020 > pm2.5_thresh_highly_polluted) %>%
summarise(tot_pop = sum(population, na.rm = TRUE)) %>%
unlist()
# percent pop where pollution is > x micrograms per cubic meter (hp)
perc_pop_above_x_hp_micr_gm <- round((total_pop_above_x_hp_micr_gm/world_pop)*100, 1)
# total pop where pollution is > x micrograms per cubic meter in millions (hp)
tot_pop_above_x_hp_micr_gm_millions <- round(total_pop_above_x_hp_micr_gm/1000000, 1)
# higher than sp
# total pop where pollution is > x micrograms per cubic meter (sp)
total_pop_above_x_sp_micr_gm <- aqli_color %>%
filter(pm2020 > pm2.5_thresh_severly_polluted) %>%
summarise(tot_pop = sum(population, na.rm = TRUE)) %>%
unlist()
# percent pop where pollution is > x micrograms per cubic meter (sp)
perc_pop_above_x_sp_micr_gm <- round((total_pop_above_x_sp_micr_gm/world_pop)*100, 1)
# total pop where pollution is > x micrograms per cubic meter in millions (sp)
tot_pop_above_x_sp_micr_gm_millions <- round(total_pop_above_x_sp_micr_gm/1000000, 1)
# less than lp
# total pop where pollution is < x micrograms per cubic meter (lp)
total_pop_below_x_lp_micr_gm <- aqli_color %>%
filter(pm2020 < pm2.5_thresh_low_polluted) %>%
summarise(tot_pop = sum(population, na.rm = TRUE)) %>%
unlist()
# percent pop where pollution is < x micrograms per cubic meter (lp)
perc_pop_below_x_lp_micr_gm <- round((total_pop_below_x_lp_micr_gm/world_pop)*100, 1)
# total pop where pollution is > x micrograms per cubic meter in millions (lp)
tot_pop_below_x_lp_micr_gm_millions <- round(total_pop_below_x_lp_micr_gm/1000000, 1)
#> percent studies in a given pollution bucket
# higher than hp
epi_num_studies_in_hp <- epi %>%
filter(!is.na(mean_pm2.5) | mean_pm2.5 != "NA") %>%
filter(mean_pm2.5 > pm2.5_thresh_highly_polluted) %>%
nrow() %>%
unlist()
perc_epi_studies_in_hp <- round((epi_num_studies_in_hp/nrow(epi %>% filter(!is.na(mean_pm2.5) | mean_pm2.5 != "NA")))*100, 1)
# higher than sp
epi_num_studies_in_sp <- epi %>%
filter(!is.na(mean_pm2.5) | mean_pm2.5 != "NA") %>%
filter(mean_pm2.5 > pm2.5_thresh_severly_polluted) %>%
nrow() %>%
unlist()
perc_epi_studies_in_sp <- round((epi_num_studies_in_sp/nrow(epi %>% filter(!is.na(mean_pm2.5) | mean_pm2.5 != "NA")))*100, 1)
# less than lp
epi_num_studies_in_lp <- epi %>%
filter(!is.na(mean_pm2.5) | mean_pm2.5 != "NA") %>%
filter(mean_pm2.5 < pm2.5_thresh_low_polluted) %>%
nrow() %>%
unlist()
perc_epi_studies_in_lp <- round((epi_num_studies_in_lp/nrow(epi %>% filter(!is.na(mean_pm2.5) | mean_pm2.5 != "NA")))*100, 1)
# plot population and number of studies bar graph
pop_num_studies_in_pollution_buckets_graph
# plot mean pm2.5 country wise graph
mean_pm2.5_country_wise_graph
# generate summary dataset for total number of studies conducted in a given country
epi_country_count <- epi %>%
select(country) %>%
count(country) %>%
filter(country != "NA")
# making country names match before joining epi file with color file
epi_country_count$country <- str_replace(epi_country_count$country, "USA", "United States")
#> plot choropleth map
# get data ready for the choropleth map
world <- ne_countries(scale = "medium", returnclass = "sf")
# making country names match before joining epi file with color file
world$name_long <- str_replace(world$name_long, "Russian Federation", "Russia")
world$name_long <- str_replace(world$name_long, "Lao PDR", "Laos")
world$name_long <- str_replace(world$name_long, "Dem. Rep. Korea", "North Korea")
world$name_long <- str_replace(world$name_long, "Republic of Korea", "South Korea")
world$name_long <- str_replace(world$name_long, "Vatican", "Vatican City")
world$name_long <- str_replace(world$name_long, "Brunei Darussalam", "Brunei")
world$name_long <- str_replace(world$name_long, "Somaliland", "Somalia")
# joining world shape file with the epi conutry wise count dataset
world_shp_epi <- world %>%
left_join(epi_country_count, by = c("name_long" = "country")) %>%
select(name_long, n, geometry) %>%
rename(num_studies = n, country = name_long)
# color 2020 collapse to country level to get the PM2.5 pollution layer (first layer of the map)
aqli_color_country <- aqli_color %>%
group_by(country) %>%
mutate(pop_weights = population/sum(population, na.rm = TRUE),
pm2020_pop_weighted = pm2020*pop_weights) %>%
summarise(avg_pm2.5_2020 = sum(pm2020_pop_weighted, na.rm = TRUE))
# joining the world shape + epi joined file with the aqli color file
world_shp_epi_color <- world_shp_epi %>%
left_join(aqli_color_country, by = "country") %>%
filter(country != "Antarctica") %>%
select(country, num_studies, avg_pm2.5_2020, geometry)
# In the total number of studies column, replacing NAs with 0s
world_shp_epi_color <- world_shp_epi_color %>%
mutate(num_studies = ifelse(is.na(num_studies) == TRUE, 0, num_studies))
# getting centroids for countries after correcting for problematic polygons
world_shp_epi_color_for_centroids <- st_make_valid(world_shp_epi_color)
country_wise_centroids <- st_centroid(world_shp_epi_color_for_centroids, of_largest_polygon = TRUE)
# plotting the choropleth
geographic_dist_graph <- world_shp_epi_color %>%
ggplot() +
geom_sf(mapping = aes(fill = avg_pm2.5_2020), color = "white") +
scale_fill_continuous_sequential(palette = "YlOrRd") +
geom_sf(data = country_wise_centroids %>% filter(num_studies != 0), mapping = aes(size = num_studies), col = "grey", ) +
theme(legend.position = "bottom") +
scale_size_binned() +
scale_size(range = c(0, 8)) +
theme_map() +
theme(legend.position = "bottom")
#> Other calculations for this block of code
# total number of studies performed in USA and Canada
num_studies_usa_canada <- epi_country_count %>%
filter(country %in% c("United States", "Canada")) %>%
summarise(total_studies = sum(n, na.rm = TRUE)) %>%
unlist()
# total number of studies performed in USA and Canada and Europe
num_studies_usa_canada_europe <- epi_country_count %>%
filter(country %in% c("United States", "Canada", "England", "Rome", "Netherlands",
"France", "Germany",
"Spain", "Denmark")) %>%
summarise(total_studies = sum(n, na.rm = TRUE)) %>%
unlist()
# plot geographic distribution
geographic_dist_graph
epi %>%
group_by(publishing_year) %>%
summarise(total_studies = n()) %>%
ggplot() +
geom_line(mapping = aes(x = publishing_year, y = total_studies), lwd = 1.2, color = "cornflowerblue")+
scale_x_continuous(breaks = seq(1980, 2030, 5)) +
scale_y_continuous(breaks = seq(0, 14, 2)) +
labs(x = "Year", y = "Total Number of Studies") +
theme_minimal()
#> Density plot of study duration (commented for now, can use later if required)
# epi %>%
#   filter(!is.na(study_duration)) %>%
#   ggplot() +
#   geom_density(mapping = aes(x = study_duration, fill = continent), alpha = 0.5) +
#     labs(x = "Study Duration") +
#   ggtitle("Epi Studies Duration Distribution (Continent Wise): Density Plot") +
#   scale_x_continuous(breaks = seq(0, 40, 5)) +
#   theme_tufte() +
#   theme(legend.position = "bottom")
#> Histogram of study duration
# creating a temporary Africa dataset: adding in a temp row with Africa filled in to plot as an empty panel in a final figure
epi_with_africa <- epi %>%
filter(continent != "NA") %>%
add_row(continent = "Africa")
# adding an order panel in the epi aftica dataset
epi_with_africa <- epi_with_africa %>%
mutate(order_continent = ifelse(continent == "Asia", 1, 0),
order_continent = ifelse(continent == "Europe", 2, order_continent),
order_continent = ifelse(continent == "North America", 3, order_continent),
order_continent = ifelse(continent == "South America", 4, order_continent),
order_continent = ifelse(continent == "Africa", 5, order_continent))
# plot the figure with empty Africa panel
continent_wise_study_duration_graph <- epi_with_africa %>%
ggplot() +
geom_histogram(mapping = aes(x = study_duration, fill = continent), alpha = 0.5, color = "white", position = "identity", binwidth = 2) +
labs(x = "Study Duration") +
ggtitle("Epi Studies Duration Distribution (Continent Wise): Histogram") +
scale_x_continuous(breaks = seq(0, 40, 5)) +
theme_hc() +
theme(legend.title = element_blank()) +
facet_wrap(~fct_reorder(continent, order_continent), nrow = 1) +
theme(axis.line.y = element_line(color = "black"),
axis.line.x = element_line(color = "black")) +
scale_fill_manual(values = c("burlywood1", "darkcyan", "darkolivegreen4", "azure4"))
#> calculations relevant for this block of code
# long term study threshold
long_term_study_duration <- 25
# countries with studies greater than x (long_term) years of study duration
epi_long_term_studies_countries <- epi %>%
filter(study_duration > long_term_study_duration) %>%
select(country) %>%
unlist() %>%
unique()
# total number of studies in South America
num_studies_south_america <- epi %>%
filter(continent == "South America") %>%
nrow()
# plot continent wise study duration graph
continent_wise_study_duration_graph
#> exposure distribution density and histogram plots (PM2.5 LL and PM2.5 UL)
# create long dataset
epi_long <- epi %>%
pivot_longer(cols = contains("pm2.5_exposure"), names_to =  "exposure_type", values_to = "exposure_value") %>%
select(exposure_type, exposure_value) %>%
filter(!is.na(exposure_value))
# density plot
epi_long %>%
ggplot() +
geom_density(mapping = aes(x = exposure_value, fill = exposure_type), alpha = 0.6, position = "identity") +
scale_x_continuous(breaks = seq(0, 250, 10)) +
labs(x = expression(paste("PM2.5 concentration (", mu, "g", "/", m^3, ")"))) +
theme_tufte()
# histogram plot
epi_long %>%
ggplot() +
geom_histogram(mapping = aes(x = exposure_value, fill = exposure_type), position = "identity", alpha = 0.4, color = "white") +
scale_x_continuous(breaks = seq(0, 250, 10)) +
labs(x = expression(paste("PM2.5 concentration (", mu, "g", "/", m^3, ")"))) +
theme_tufte()
#> (5) age distribution plot (LL and UL) using the long dataset (density plot)
epi %>%
pivot_longer(cols = contains("cohort_age"), names_to =  "age_dist_type", values_to = "age_value") %>%
select(age_dist_type, age_value) %>%
filter(!is.na(age_value)) %>%
ggplot() +
geom_density(mapping = aes(x = age_value, fill = age_dist_type), alpha = 0.6, color = "black") +
scale_x_continuous(breaks = seq(0, 90, 5)) +
labs(x = "Age") +
theme_tufte()
#> (6) age distribution plot (LL and UL) using the long dataset (histogram plot)
epi %>%
pivot_longer(cols = contains("cohort_age"), names_to =  "age_dist_type", values_to = "age_value") %>%
select(age_dist_type, age_value) %>%
filter(!is.na(age_value)) %>%
ggplot() +
geom_histogram(mapping = aes(x = age_value, fill = age_dist_type), alpha = 0.5, position = "identity", color = "white") +
scale_x_continuous(breaks = seq(0, 90, 5)) +
scale_y_continuous(breaks = seq(0, 15, 2)) +
labs(x = "Age")
#> (7) Country Wise Cohort Size density plot
epi %>%
ggplot() +
geom_density(mapping = aes(x = log10(cohort_size), fill = country), alpha = 0.5) +
theme_tufte()
#> (8) Country wise Cohort Size histogram plot
epi %>%
ggplot() +
geom_histogram(mapping = aes(x = log10(cohort_size), fill = country), alpha = 0.5, position = "identity") +
theme_tufte()
save(list = ls(all = TRUE), file= "all.RData")
runApp()
# loading the .RData file that contain all required data objects
# save(list = ls(all = TRUE), file= "all.RData")
load("all.RData", .GlobalEnv)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
# load app.R helper file
source("./R/app_helper.R")
runApp()
shiny::runApp()
runApp()
rm(list = ls())
runApp()
# loading the .RData file that contain all required data objects
save(list = ls(all = TRUE), file= "all.RData")
runApp()
rm(list = ls())
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
rm(list = ls())
runApp()
rm(list = ls())
runApp()
# loading the .RData file that contain all required data objects
save(list = ls(all = TRUE), file= "all.RData")
rm(list = ls())
runApp()
rm(list = ls())
runApp()
rm(list = ls())
runApp()
# loading the .RData file that contain all required data objects
save(list = ls(all = TRUE), file= "all.RData")
runApp()
rm(list = ls())
runApp()
Negate
?Negate()
magrittr::%>%
rm(list = ls())
runApp()
rm(list = ls())
?`%in%`
rm(list = ls())
runApp()
# loading the .RData file that contain all required data objects
save(list = ls(all = TRUE), file= "all.RData")
rm(list = ls())
runApp()
# loading the .RData file that contain all required data objects
save(list = ls(all = TRUE), file= "all.RData")
rm(list = ls())
shiny::runApp()
# loading the .RData file that contain all required data objects
save(list = ls(all = TRUE), file= "all.RData")
rm(list = ls())
runApp()
magrittr::%>%
?magrittr::%>%
?`%>%`
runApp()
rm(list = ls())
rm(list = ls())
runApp()
percent_people_above_who
percent_people_above_who +  1
percent_people_above_who
# loading the .RData file that contain all required data objects
save(list = ls(all = TRUE), file= "all.RData")
rm(list = ls())
runApp()
runApp()
runApp()
runApp()
?valueBox
?formatC
runApp()
runApp()
runApp()
?n()
runApp()
installed.packages("rnaturalearth")
install.packages("rnaturalearth")
install.packages("rnaturalearth")
rm(list = ls())
shiny::runApp()
# loading the .RData file that contain all required data objects
# save(list = ls(all = TRUE), file= "all.RData")
load("all.RData", .GlobalEnv)
rm(list = ls())
runApp()
# loading the .RData file that contain all required data objects
save(list = ls(all = TRUE), file= "all.RData")
rm(list = ls())
runApp()
runApp()
runApp()
unique(aqli_color$country)
unique(aqli_color$country) %>% write_csv("countries_color.csv")
unique(as_tibble(aqli_color$country)) %>% write_csv("countries_color.csv")
aqli_color$country[3]
unique(aqli_color$country)[3]
unique(aqli_color$country)[53]
unique(aqli_color$country)[56]
unique(aqli_color$country)[177]
unique(aqli_color$country)[181]
unique(aqli_color$country)[190]
runApp()
runApp()
aqli_color %>% filter(country == "South Korea")
aqli_color %>% filter(country == "Czech Republic")
aqli_color %>% filter(country == "Macedonia")
aqli_color %>% filter(country == "North Macedonia")
aqli_color %>% filter(country == "Republic of Macedonia")
aqli_color %>% filter(country == "Macedonia")
runApp()
runApp()
?ggplotly
#> read in datasets
# global variables
who_pm2.5_guideline <- 5
# epi studies analysis raw sheet
epi <- readxl::read_xlsx("./data-raw/pm2.5_distribution/AQLI_Epidemiology Literature Research.xlsx", sheet = "AnalysisDatasetPM2.5MortalityAn")
# AQLI color file
aqli_color <- read_csv("./data-raw/pm2.5_distribution/color.csv")
# global operations
`%notin%` <- Negate(`%in%`)
#> change default columns types
epi$cohort_size <- as.numeric(epi$cohort_size)
epi$study_start_year<- as.numeric(epi$study_start_year)
epi$study_end_year <- as.numeric(epi$study_end_year)
epi$pm2.5_exposure_ll <- as.numeric(epi$pm2.5_exposure_ll)
epi$pm2.5_exposure_ul <- as.numeric(epi$pm2.5_exposure_ul)
epi$mean_pm2.5 <- as.numeric(epi$mean_pm2.5)
epi$sd_pm2.5 <- as.numeric(epi$sd_pm2.5)
epi$cohort_age_ll <- as.numeric(epi$cohort_age_ll)
epi$cohort_age_ul <- as.numeric(epi$cohort_age_ul)
#> add useful columns and filter out some studies (e.g. pooled studies, meta analysis)
epi <- epi %>%
mutate(study_duration = (study_end_year - study_start_year) + 1)
#> Calculations needed for all sections above the "Results section".
# percent of population not in compliance with the WHO guideline
num_people_above_who <- aqli_color %>%
filter(pm2020 > who_pm2.5_guideline) %>%
summarise(tot_pop = sum(population, na.rm = TRUE)) %>%
unlist()
# world population
world_pop <- aqli_color %>%
summarise(tot_pop = sum(population, na.rm = TRUE)) %>%
unlist()
percent_people_above_who <- round((num_people_above_who/world_pop)*100, 1)
# plotting the choropleth
geographic_dist_graph <- world_shp_epi_color %>%
ggplot() +
geom_sf(mapping = aes(fill = avg_pm2.5_2020), color = "white") +
scale_fill_continuous_sequential(palette = "YlOrRd") +
geom_sf(data = country_wise_centroids %>% filter(num_studies != 0), mapping = aes(size = num_studies), col = "grey", ) +
theme(legend.position = "bottom") +
scale_size_binned() +
scale_size(range = c(1, 10)) +
theme_map() +
theme(legend.position = "bottom")
runApp()
install.packages("googlesheets4")
library(googlesheets4)
epi <- read_sheet("https://docs.google.com/spreadsheets/d/1AljEJhNPLWX_8xRbT_HJuERBpbQt_QGixgJ9jEzFyQw/edit#gid=2082201996")
epi <- read_sheet("https://docs.google.com/spreadsheets/d/1AljEJhNPLWX_8xRbT_HJuERBpbQt_QGixgJ9jEzFyQw/edit#gid=2082201996")
rlang::last_error()
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(rlang)
library(googlesheets4)
epi <- read_sheet("https://docs.google.com/spreadsheets/d/1AljEJhNPLWX_8xRbT_HJuERBpbQt_QGixgJ9jEzFyQw/edit#gid=2082201996")
epi
epi <- read_sheet("https://docs.google.com/spreadsheets/d/1AljEJhNPLWX_8xRbT_HJuERBpbQt_QGixgJ9jEzFyQw/edit#gid=2082201996")
?read_sheet
epi <- read_sheet("https://docs.google.com/spreadsheets/d/1AljEJhNPLWX_8xRbT_HJuERBpbQt_QGixgJ9jEzFyQw/edit#gid=2082201996", sheet = "[AnalysisDataset]PM2.5MortalityAnalysisDataset")
View(epi)
aqli_color <- read_sheet("https://docs.google.com/spreadsheets/d/1AljEJhNPLWX_8xRbT_HJuERBpbQt_QGixgJ9jEzFyQw/edit#gid=1071420569", sheet = "[DO_NOT_EDIT]aqli_color_2020")
shiny::runApp()
epi <- read_sheet("https://docs.google.com/spreadsheets/d/1AljEJhNPLWX_8xRbT_HJuERBpbQt_QGixgJ9jEzFyQw/edit#gid=2082201996", sheet = "[AnalysisDataset]PM2.5MortalityAnalysisDataset")
class(epi)
runApp()
epi <- googlesheets4::read_sheet("https://docs.google.com/spreadsheets/d/1AljEJhNPLWX_8xRbT_HJuERBpbQt_QGixgJ9jEzFyQw/edit#gid=2082201996", sheet = "[AnalysisDataset]PM2.5MortalityAnalysisDataset")
class(epi$publishing_year)
class(epi$paper_name)
runApp()
runApp()
runApp()
runApp()
