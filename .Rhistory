axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10),
legend.text = element_text(size = 10),
plot.caption = element_text(face = "italic", hjust = 0),
legend.title = element_text(hjust = 0.5),
panel.grid.major.y = element_blank(),
axis.title = element_text(size = 11),
legend.key.size = unit(0.5, "cm"))
foo43
foo3
foo3 <- ggplot(data = tibble(x = 1:120), mapping = aes(x = x)) +
#geom_hline(yintercept = seq(0, 0.175, 0.05), linetype = "dashed", color = "lavenderblush2") +
geom_function(fun = gemm_empirical, size = 1.2, args = list(deriv = 1), mapping = aes(color = "#5B96AD")) +
geom_function(fun = aqli_empirical, size = 1.2, args = list(deriv = 1), mapping = aes(color = "#8F3931")) +
geom_function(fun = meta_empirical, size = 1.2, args = list(deriv = 1), mapping = aes(color = "#91AB5A")) +
geom_function(fun = ier2019_empirical, size = 1.2, args = list(deriv = 1), mapping = aes(color = "#767676")) +
scale_y_continuous(breaks = seq(0, 0.2, 0.05), limits = c(0, .2)) +
scale_x_continuous(breaks = seq(0, 140, 15), limits = c(0, 140)) +
labs(x = "", y = "Marginal Life Expectancy Lost", color = "",
title = str_wrap("PM2.5 exposure in comparison with population and number of epi papers and alternative approaches to measure PM2.5 Life Expectancy relationship", width = 30)) +
scale_color_identity(breaks = c("#8F3931", "#91AB5A", "#5B96AD", "#767676"),
labels = c("AQLI", "META", "GEMM", "IER-2019"),
guide = "legend") +
ggthemes::theme_hc() %+replace%
theme(legend.position = c(0.7, 0.93),
legend.direction = "horizontal",
axis.line.x = element_line(),
axis.line.y = element_line(),
plot.title = element_text(hjust =  0.5, size = 10, color = "black"),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10),
legend.text = element_text(size = 10),
plot.caption = element_text(face = "italic", hjust = 0),
legend.title = element_text(hjust = 0.5),
panel.grid.major.y = element_blank(),
axis.title = element_text(size = 11),
legend.key.size = unit(0.5, "cm"))
foo3
foo3 <- ggplot(data = tibble(x = 1:120), mapping = aes(x = x)) +
#geom_hline(yintercept = seq(0, 0.175, 0.05), linetype = "dashed", color = "lavenderblush2") +
geom_function(fun = gemm_empirical, size = 1.2, args = list(deriv = 1), mapping = aes(color = "#5B96AD")) +
geom_function(fun = aqli_empirical, size = 1.2, args = list(deriv = 1), mapping = aes(color = "#8F3931")) +
geom_function(fun = meta_empirical, size = 1.2, args = list(deriv = 1), mapping = aes(color = "#91AB5A")) +
geom_function(fun = ier2019_empirical, size = 1.2, args = list(deriv = 1), mapping = aes(color = "#767676")) +
scale_y_continuous(breaks = seq(0, 0.2, 0.05), limits = c(0, .2)) +
scale_x_continuous(breaks = seq(0, 140, 15), limits = c(0, 140)) +
labs(x = "", y = "Marginal Life Expectancy Lost", color = "",
title = str_wrap("PM2.5 exposure in comparison with population and number of epi papers and alternative approaches to measure PM2.5 Life Expectancy relationship", width = 90)) +
scale_color_identity(breaks = c("#8F3931", "#91AB5A", "#5B96AD", "#767676"),
labels = c("AQLI", "META", "GEMM", "IER-2019"),
guide = "legend") +
ggthemes::theme_hc() %+replace%
theme(legend.position = c(0.7, 0.93),
legend.direction = "horizontal",
axis.line.x = element_line(),
axis.line.y = element_line(),
plot.title = element_text(hjust =  0.5, size = 10, color = "black"),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10),
legend.text = element_text(size = 10),
plot.caption = element_text(face = "italic", hjust = 0),
legend.title = element_text(hjust = 0.5),
panel.grid.major.y = element_blank(),
axis.title = element_text(size = 11),
legend.key.size = unit(0.5, "cm"))
foo3
foo3 <- ggplot(data = tibble(x = 1:120), mapping = aes(x = x)) +
#geom_hline(yintercept = seq(0, 0.175, 0.05), linetype = "dashed", color = "lavenderblush2") +
geom_function(fun = gemm_empirical, size = 1.2, args = list(deriv = 1), mapping = aes(color = "#5B96AD")) +
geom_function(fun = aqli_empirical, size = 1.2, args = list(deriv = 1), mapping = aes(color = "#8F3931")) +
geom_function(fun = meta_empirical, size = 1.2, args = list(deriv = 1), mapping = aes(color = "#91AB5A")) +
geom_function(fun = ier2019_empirical, size = 1.2, args = list(deriv = 1), mapping = aes(color = "#767676")) +
scale_y_continuous(breaks = seq(0, 0.2, 0.05), limits = c(0, .2)) +
scale_x_continuous(breaks = seq(0, 140, 15), limits = c(0, 140)) +
labs(x = "", y = "Marginal Life Expectancy Lost", color = "",
title = str_wrap("PM2.5 exposure in comparison with population and number of epi papers and alternative approaches to measure PM2.5 Life Expectancy relationship.", width = 90)) +
scale_color_identity(breaks = c("#8F3931", "#91AB5A", "#5B96AD", "#767676"),
labels = c("AQLI", "META", "GEMM", "IER-2019"),
guide = "legend") +
ggthemes::theme_hc() %+replace%
theme(legend.position = c(0.7, 0.93),
legend.direction = "horizontal",
axis.line.x = element_line(),
axis.line.y = element_line(),
plot.title = element_text(hjust =  0.5, size = 10, color = "black"),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10),
legend.text = element_text(size = 10),
plot.caption = element_text(face = "italic", hjust = 0),
legend.title = element_text(hjust = 0.5),
panel.grid.major.y = element_blank(),
axis.title = element_text(size = 11),
legend.key.size = unit(0.5, "cm"))
gridExtra::grid.arrange(foo3,foo1, foo, heights = c(1, 1, 1))
foo3 <- ggplot(data = tibble(x = 1:120), mapping = aes(x = x)) +
#geom_hline(yintercept = seq(0, 0.175, 0.05), linetype = "dashed", color = "lavenderblush2") +
geom_function(fun = gemm_empirical, size = 1.2, args = list(deriv = 1), mapping = aes(color = "#5B96AD")) +
geom_function(fun = aqli_empirical, size = 1.2, args = list(deriv = 1), mapping = aes(color = "#8F3931")) +
geom_function(fun = meta_empirical, size = 1.2, args = list(deriv = 1), mapping = aes(color = "#91AB5A")) +
geom_function(fun = ier2019_empirical, size = 1.2, args = list(deriv = 1), mapping = aes(color = "#767676")) +
scale_y_continuous(breaks = seq(0, 0.2, 0.05), limits = c(0, .2)) +
scale_x_continuous(breaks = seq(0, 140, 15), limits = c(0, 140)) +
labs(x = "", y = "Marginal Life Expectancy Lost", color = "",
title = str_wrap("PM2.5 exposure in comparison with population and number of epi papers and alternative approaches to measure PM2.5 Life Expectancy relationship.", width = 90)) +
scale_color_identity(breaks = c("#8F3931", "#91AB5A", "#5B96AD", "#767676"),
labels = c("AQLI", "META", "GEMM", "IER-2019"),
guide = "legend") +
ggthemes::theme_hc() %+replace%
theme(legend.position = c(0.7, 0.9),
legend.direction = "horizontal",
axis.line.x = element_line(),
axis.line.y = element_line(),
plot.title = element_text(hjust =  0.5, size = 10, color = "black"),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10),
legend.text = element_text(size = 10),
plot.caption = element_text(face = "italic", hjust = 0),
legend.title = element_text(hjust = 0.5),
panel.grid.major.y = element_blank(),
axis.title = element_text(size = 11),
legend.key.size = unit(0.5, "cm"))
gridExtra::grid.arrange(foo3,foo1, foo, heights = c(1, 1, 1))
foo3 <- ggplot(data = tibble(x = 1:120), mapping = aes(x = x)) +
#geom_hline(yintercept = seq(0, 0.175, 0.05), linetype = "dashed", color = "lavenderblush2") +
geom_function(fun = gemm_empirical, size = 1.2, args = list(deriv = 1), mapping = aes(color = "#5B96AD")) +
geom_function(fun = aqli_empirical, size = 1.2, args = list(deriv = 1), mapping = aes(color = "#8F3931")) +
geom_function(fun = meta_empirical, size = 1.2, args = list(deriv = 1), mapping = aes(color = "#91AB5A")) +
geom_function(fun = ier2019_empirical, size = 1.2, args = list(deriv = 1), mapping = aes(color = "#767676")) +
scale_y_continuous(breaks = seq(0, 0.2, 0.05), limits = c(0, .2)) +
scale_x_continuous(breaks = seq(0, 140, 15), limits = c(0, 140)) +
labs(x = "", y = "Marginal Life Expectancy Lost", color = "",
title = str_wrap("PM2.5 exposure in comparison with population and number of epi papers and alternative approaches to measure PM2.5 Life Expectancy relationship.", width = 90)) +
scale_color_identity(breaks = c("#8F3931", "#91AB5A", "#5B96AD", "#767676"),
labels = c("AQLI", "META", "GEMM", "IER-2019"),
guide = "legend") +
ggthemes::theme_hc() %+replace%
theme(legend.position = c(0.8, 0.9),
legend.direction = "horizontal",
axis.line.x = element_line(),
axis.line.y = element_line(),
plot.title = element_text(hjust =  0.5, size = 10, color = "black"),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10),
legend.text = element_text(size = 10),
plot.caption = element_text(face = "italic", hjust = 0),
legend.title = element_text(hjust = 0.5),
panel.grid.major.y = element_blank(),
axis.title = element_text(size = 11),
legend.key.size = unit(0.5, "cm"))
foo3
gridExtra::grid.arrange(foo3,foo1, foo, heights = c(1, 1, 1))
gridExtra::grid.arrange(foo3,foo1, foo, heights = c(1, 1, 1))
foo_v2 <- aqli_color %>%
group_by(pm2021) %>%
summarise(count_pm2021 = sum(population, na.rm = TRUE),
count_pm2021_millions = round(count_pm2021/1000000, 1)) %>%
ggplot() +
geom_hline(yintercept = c(300, 600, 900, 1200), linetype = "dashed", color = "lavenderblush2") +
geom_col(mapping = aes(x = pm2021, y = count_pm2021_millions), fill = "#8FA1AD", color = "white", alpha = 0.7, width = 0.5) +
ggthemes::theme_hc() +
labs(x = expression("Annual Average" ~ PM[2.5] ~ "(in µg/m³)"),
y = "Population (in millions)") +
scale_y_binned(breaks = seq(0, 1500, 300)) +
scale_x_continuous(breaks = seq(0, 140, 15), limits = c(0, 140)) +
theme(axis.line = element_line(),
panel.grid.major.y = element_blank(),
axis.title = element_text(size = 11))
foo_v2
foo_v2 <- aqli_color %>%
group_by(pm2021) %>%
summarise(count_pm2021 = sum(population, na.rm = TRUE),
count_pm2021_millions = round(count_pm2021/1000000, 1)) %>%
ggplot() +
geom_hline(yintercept = c(300, 600, 900, 1200), linetype = "dashed", color = "lavenderblush2") +
geom_col(mapping = aes(x = pm2021, y = count_pm2021_millions), fill = "#8FA1AD", color = "white", alpha = 0.7, width = 0.5) +
ggthemes::theme_hc() +
labs(x = expression("Annual Average" ~ PM[2.5] ~ "(in µg/m³)"),
y = "Population (in millions)") +
scale_y_binned() +
scale_x_continuous(breaks = seq(0, 140, 15), limits = c(0, 140)) +
theme(axis.line = element_line(),
panel.grid.major.y = element_blank(),
axis.title = element_text(size = 11))
foo_v2
foo_v2 <- aqli_color %>%
group_by(pm2021) %>%
summarise(count_pm2021 = sum(population, na.rm = TRUE),
count_pm2021_millions = round(count_pm2021/1000000, 1)) %>%
ggplot() +
geom_hline(yintercept = c(300, 600, 900, 1200), linetype = "dashed", color = "lavenderblush2") +
geom_col(mapping = aes(x = pm2021, y = count_pm2021_millions), fill = "#8FA1AD", color = "white", alpha = 0.7, width = 0.5) +
ggthemes::theme_hc() +
labs(x = expression("Annual Average" ~ PM[2.5] ~ "(in µg/m³)"),
y = "Population (in millions)") +
scale_x_binned() +
scale_x_continuous(breaks = seq(0, 140, 15), limits = c(0, 140)) +
theme(axis.line = element_line(),
panel.grid.major.y = element_blank(),
axis.title = element_text(size = 11))
foo_V2
foo_v2
foo_v2 <- aqli_color %>%
group_by(pm2021) %>%
summarise(count_pm2021 = sum(population, na.rm = TRUE),
count_pm2021_millions = round(count_pm2021/1000000, 1)) %>%
ggplot() +
geom_hline(yintercept = c(300, 600, 900, 1200), linetype = "dashed", color = "lavenderblush2") +
geom_col(mapping = aes(x = pm2021, y = count_pm2021_millions), fill = "#8FA1AD", color = "white", alpha = 0.7, width = 0.5) +
ggthemes::theme_hc() +
labs(x = expression("Annual Average" ~ PM[2.5] ~ "(in µg/m³)"),
y = "Population (in millions)") +
scale_x_binned() +
theme(axis.line = element_line(),
panel.grid.major.y = element_blank(),
axis.title = element_text(size = 11))
foo_v2
foo_v2 <- aqli_color %>%
group_by(pm2021) %>%
summarise(count_pm2021 = sum(population, na.rm = TRUE),
count_pm2021_millions = round(count_pm2021/1000000, 1)) %>%
ggplot() +
geom_hline(yintercept = c(300, 600, 900, 1200), linetype = "dashed", color = "lavenderblush2") +
geom_col(mapping = aes(x = pm2021, y = count_pm2021_millions), fill = "#8FA1AD", color = "white", alpha = 0.7, width = 0.5) +
ggthemes::theme_hc() +
labs(x = expression("Annual Average" ~ PM[2.5] ~ "(in µg/m³)"),
y = "Population (in millions)") +
scale_x_binned(breaks = seq(0, 140, 15), limits = c(0, 140)) +
theme(axis.line = element_line(),
panel.grid.major.y = element_blank(),
axis.title = element_text(size = 11))
foo_v2
foo_v2 <- aqli_color %>%
group_by(pm2021) %>%
summarise(count_pm2021 = sum(population, na.rm = TRUE),
count_pm2021_millions = round(count_pm2021/1000000, 1)) %>%
ggplot() +
geom_hline(yintercept = c(300, 600, 900, 1200), linetype = "dashed", color = "lavenderblush2") +
geom_col(mapping = aes(x = pm2021, y = count_pm2021_millions), fill = "#8FA1AD", alpha = 0.7, width = 0.5) +
ggthemes::theme_hc() +
labs(x = expression("Annual Average" ~ PM[2.5] ~ "(in µg/m³)"),
y = "Population (in millions)") +
scale_x_binned(breaks = seq(0, 140, 15), limits = c(0, 140)) +
theme(axis.line = element_line(),
panel.grid.major.y = element_blank(),
axis.title = element_text(size = 11))
foo_v2
foo_v2 <- aqli_color %>%
group_by(pm2021) %>%
summarise(count_pm2021 = sum(population, na.rm = TRUE),
count_pm2021_millions = round(count_pm2021/1000000, 1)) %>%
ggplot() +
geom_hline(yintercept = c(300, 600, 900, 1200), linetype = "dashed", color = "lavenderblush2") +
geom_col(mapping = aes(x = pm2021, y = count_pm2021_millions), fill = "#8FA1AD", alpha = 0.7, width = 0.9) +
ggthemes::theme_hc() +
labs(x = expression("Annual Average" ~ PM[2.5] ~ "(in µg/m³)"),
y = "Population (in millions)") +
scale_x_binned(breaks = seq(0, 140, 15), limits = c(0, 140)) +
theme(axis.line = element_line(),
panel.grid.major.y = element_blank(),
axis.title = element_text(size = 11))
foo_v2
foo_v2 <- aqli_color %>%
group_by(pm2021) %>%
summarise(count_pm2021 = sum(population, na.rm = TRUE),
count_pm2021_millions = round(count_pm2021/1000000, 1)) %>%
ggplot() +
geom_hline(yintercept = c(500, 1000, 1500, 2000, 2500), linetype = "dashed", color = "lavenderblush2") +
geom_col(mapping = aes(x = pm2021, y = count_pm2021_millions), fill = "#8FA1AD", alpha = 0.7, width = 0.9) +
ggthemes::theme_hc() +
labs(x = expression("Annual Average" ~ PM[2.5] ~ "(in µg/m³)"),
y = "Population (in millions)") +
scale_x_binned(breaks = seq(0, 140, 15), limits = c(0, 140)) +
scale_y_continuous(breaks = seq(0, 2500, 500))
foo_v2
foo1_v2 <-  epi %>%
group_by(mean_pm2.5) %>%
summarise(count_mean_pm2.5 = n()) %>%
ggplot() +
geom_hline(yintercept = c(5, 10, 15, 20), linetype = "dashed", color = "lavenderblush2") +
geom_col(mapping = aes(x = mean_pm2.5, y = count_mean_pm2.5), fill = "#343434", color = "white", alpha = 0.7, width = 0.5) +  ggthemes::theme_hc() +
labs(x = "",
y = "Number of epi papers") +
scale_y_continuous(breaks = seq(0, 30, 5)) +
scale_x_binned(breaks = seq(0, 140, 15), limits = c(0, 140)) +
theme(axis.line = element_line(),
panel.grid.major.y = element_blank(),
axis.title = element_text(size = 11))
foo1_v2
foo_v2
foo1_v2 <-  epi %>%
group_by(mean_pm2.5) %>%
summarise(count_mean_pm2.5 = n()) %>%
ggplot() +
geom_hline(yintercept = c(10, 20, 30, 40, 50), linetype = "dashed", color = "lavenderblush2") +
geom_col(mapping = aes(x = mean_pm2.5, y = count_mean_pm2.5), fill = "#343434", alpha = 0.7, width = 0.9) +  ggthemes::theme_hc() +
labs(x = "",
y = "Number of epi papers") +
scale_y_continuous(breaks = seq(0, 50, 10)) +
scale_x_binned(breaks = seq(0, 140, 15), limits = c(0, 140)) +
theme(axis.line = element_line(),
panel.grid.major.y = element_blank(),
axis.title = element_text(size = 11))
foo1_v2
foo1_v2 <-  epi %>%
group_by(mean_pm2.5) %>%
summarise(count_mean_pm2.5 = n()) %>%
ggplot() +
geom_hline(yintercept = c(10, 20, 30, 40, 50), linetype = "dashed", color = "lavenderblush2") +
geom_col(mapping = aes(x = mean_pm2.5, y = count_mean_pm2.5), fill = "#343434", alpha = 0.7, width = 0.9) +  ggthemes::theme_hc() +
labs(x = "",
y = "Number of epi papers") +
scale_y_continuous(breaks = seq(0, 40, 10)) +
scale_x_binned(breaks = seq(0, 140, 15), limits = c(0, 140)) +
theme(axis.line = element_line(),
panel.grid.major.y = element_blank(),
axis.title = element_text(size = 11))
foo1_v2
foo1_v2 <-  epi %>%
group_by(mean_pm2.5) %>%
summarise(count_mean_pm2.5 = n()) %>%
ggplot() +
geom_hline(yintercept = c(10, 20, 30, 40), linetype = "dashed", color = "lavenderblush2") +
geom_col(mapping = aes(x = mean_pm2.5, y = count_mean_pm2.5), fill = "#343434", alpha = 0.7, width = 0.9) +  ggthemes::theme_hc() +
labs(x = "",
y = "Number of epi papers") +
scale_y_continuous(breaks = seq(0, 40, 10)) +
scale_x_binned(breaks = seq(0, 140, 15), limits = c(0, 140)) +
theme(axis.line = element_line(),
panel.grid.major.y = element_blank(),
axis.title = element_text(size = 11))
foo1_v2
foo3 <- ggplot(data = tibble(x = 1:120), mapping = aes(x = x)) +
#geom_hline(yintercept = seq(0, 0.175, 0.05), linetype = "dashed", color = "lavenderblush2") +
geom_function(fun = gemm_empirical, size = 1.2, args = list(deriv = 1), mapping = aes(color = "#5B96AD")) +
geom_function(fun = aqli_empirical, size = 1.2, args = list(deriv = 1), mapping = aes(color = "#8F3931")) +
geom_function(fun = meta_empirical, size = 1.2, args = list(deriv = 1), mapping = aes(color = "#91AB5A")) +
geom_function(fun = ier2019_empirical, size = 1.2, args = list(deriv = 1), mapping = aes(color = "#767676")) +
scale_y_continuous(breaks = seq(0, 0.2, 0.05), limits = c(0, .2)) +
scale_x_continuous(breaks = seq(0, 140, 15), limits = c(0, 140)) +
labs(x = "", y = "Marginal Life Expectancy Lost", color = "",
title = str_wrap("PM2.5 exposure in comparison with population and number of epi papers and alternative approaches to measure PM2.5 Life Expectancy relationship.", width = 90)) +
scale_color_identity(breaks = c("#8F3931", "#91AB5A", "#5B96AD", "#767676"),
labels = c("AQLI", "META", "GEMM", "IER-2019"),
guide = "legend") +
ggthemes::theme_hc() %+replace%
theme(legend.position = c(0.8, 0.9),
legend.direction = "horizontal",
axis.line.x = element_line(),
axis.line.y = element_line(),
plot.title = element_text(hjust =  0.5, size = 10, color = "black"),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10),
legend.text = element_text(size = 10),
plot.caption = element_text(face = "italic", hjust = 0),
legend.title = element_text(hjust = 0.5),
panel.grid.major.y = element_blank(),
axis.title = element_text(size = 11),
legend.key.size = unit(0.5, "cm"))
gridExtra::grid.arrange(foo3,foo1, foo, heights = c(1, 1, 1))
gridExtra::grid.arrange(foo3,foo1_v2, foo_v2, heights = c(1, 1, 1))
gridExtra::grid.arrange(foo3,foo1_v2, foo_v2, heights = c(1, 1, 1))
df <- data.frame(id = 1:3, value = c(2.104, 3.321, 1.005))
# Round the value column to 2 decimal places and format as "2.10"
df$value <- sprintf("%.2f", round(df$value, 2))
df$value
class(df$value)
as.numeric(df$value)
write.csv(df, "output.csv", row.names = FALSE)
df$value <- as.numeric(df$value)
write.csv(df, "output.csv", row.names = FALSE)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# loading the .RData file that contain all required data objects
save(list = ls(all = TRUE), file= "all.RData")
rm(list = ls())
runApp()
# loading the .RData file that contain all required data objects
save(list = ls(all = TRUE), file= "all.RData")
rm(list = ls())
gc()
shiny::runApp()
runApp()
runApp()
runApp()
# loading the .RData file that contain all required data objects
save(list = ls(all = TRUE), file= "all.RData")
runApp()
SpaDES.addins:::addin_clearCache()
runApp()
shiny::runApp()
# AQLI color file
aqli_color <- read_csv("./../data-raw/pm2.5_distribution/[finalizedApr2023]gadm2_aqli2021_vit.csv")
library(readr)
library(dplyr)
library(stringr)
library(magrittr)
library(ggplot2)
library(readr)
library(tidytext)
library(tidyr)
library(tidyverse)
library(ggthemes)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(mapsf)
library(colorspace)
library(shiny)
library(shinydashboard)
library(DT)
# AQLI color file
aqli_color <- read_csv("./../data-raw/pm2.5_distribution/[finalizedApr2023]gadm2_aqli2021_vit.csv")
setwd("./appPublic")
# AQLI color file
aqli_color <- read_csv("./../data-raw/pm2.5_distribution/[finalizedApr2023]gadm2_aqli2021_vit.csv")
View(aqli_color)
aqli_color <- aqli_color %>%
dplyr::rename_with(~str_replace(.x, "who", "llpp_who_"), dplyr::contains("who")) %>%
dplyr::rename_with(~str_replace(.x, "nat", "llpp_nat_"), dplyr::contains("nat")) %>%
dplyr::rename(country = name0) %>%
dplyr::mutate(whostandard = who_pm2.5_guideline) %>%
dplyr::select(objectid_gadm2:population, whostandard, everything())
# global variables
who_pm2.5_guideline <- 5
aqli_color <- aqli_color %>%
dplyr::rename_with(~str_replace(.x, "who", "llpp_who_"), dplyr::contains("who")) %>%
dplyr::rename_with(~str_replace(.x, "nat", "llpp_nat_"), dplyr::contains("nat")) %>%
dplyr::rename(country = name0) %>%
dplyr::mutate(whostandard = who_pm2.5_guideline) %>%
dplyr::select(objectid_gadm2:population, whostandard, everything())
epi
aqli_color <- aqli_color %>%
dplyr::rename_with(~str_replace(.x, "who", "llpp_who_"), dplyr::contains("who")) %>%
dplyr::rename_with(~str_replace(.x, "nat", "llpp_nat_"), dplyr::contains("nat")) %>%
dplyr::rename(country = name0) %>%
dplyr::mutate(whostandard = who_pm2.5_guideline) %>%
dplyr::select(objectid_gadm2:population, whostandard, everything())
# app.R helper file-------------------------------------------------------------
## libraries
library(readr)
library(dplyr)
library(stringr)
library(magrittr)
library(ggplot2)
library(readr)
library(tidytext)
library(tidyr)
library(tidyverse)
library(ggthemes)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(mapsf)
library(colorspace)
library(shiny)
library(shinydashboard)
library(DT)
# global variables
who_pm2.5_guideline <- 5
# global operations
`%notin%` <- Negate(`%in%`)
# epi studies analysis raw sheet
epi <- readxl::read_xlsx("./../data-raw/pm2.5_distribution/AQLI_Epidemiology Literature Research.xlsx", sheet = "AnalysisDatasetPM2.5MortalityAn")
#> change default columns types
epi$cohort_size <- as.numeric(epi$cohort_size)
epi$study_start_year<- as.numeric(epi$study_start_year)
epi$study_end_year <- as.numeric(epi$study_end_year)
epi$pm2.5_exposure_ll <- as.numeric(epi$pm2.5_exposure_ll)
epi$pm2.5_exposure_ul <- as.numeric(epi$pm2.5_exposure_ul)
epi$mean_pm2.5 <- as.numeric(epi$mean_pm2.5)
epi$sd_pm2.5 <- as.numeric(epi$sd_pm2.5)
epi$cohort_age_ll <- as.numeric(epi$cohort_age_ll)
epi$cohort_age_ul <- as.numeric(epi$cohort_age_ul)
# AQLI color file
aqli_color <- read_csv("./../data-raw/pm2.5_distribution/[finalizedApr2023]gadm2_aqli2021_vit.csv")
aqli_color <- aqli_color %>%
dplyr::rename_with(~str_replace(.x, "who", "llpp_who_"), dplyr::contains("who")) %>%
dplyr::rename_with(~str_replace(.x, "nat", "llpp_nat_"), dplyr::contains("nat")) %>%
dplyr::rename(country = name0) %>%
dplyr::mutate(whostandard = who_pm2.5_guideline) %>%
dplyr::select(objectid_gadm2:population, whostandard, everything())
aqli_color <- aqli_color %>%
dplyr::mutate(objectid_color = objectid_gadm2)
# getting a country continent file
country_continent <- read_csv("./../data-raw/pm2.5_distribution/country_continent.csv")
# adding a continent column to the color file
aqli_color <- aqli_color %>%
left_join(country_continent, by = "country") %>%
select(objectid_color:iso_alpha3, continent, everything())
source("C:/Users/Aarsh/Desktop/aqli-epic/epi.meta.analysis/appPublic/app_helper.R")
source("C:/Users/Aarsh/Desktop/aqli-epic/epi.meta.analysis/appPublic/app_helper.R")
epi
foo <- epi %>% dplyr::filter(continent != "NA", !is.na(continent), study_duration != "NA", !is.na(study_duration)) %>%
dplyr::group_by(paper_uid, continent) %>%
dplyr::summarise(average_study_duration = mean(study_duration, na.rm = TRUE)) %>%
dplyr::ungroup()
View(foo)
View(epi)
rm(list = ls())
runApp()
# loading the .RData file that contain all required data objects
save(list = ls(all = TRUE), file= "all.RData")
# loading the .RData file that contain all required data objects
save(list = ls(all = TRUE), file= "all.RData")
